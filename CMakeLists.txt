#CMAKE SETUP
#Require 2.4.2 for Qt finding
#Require 2.4.3 for moc change detection
CMAKE_MINIMUM_REQUIRED(VERSION 2.4.3 FATAL_ERROR)

SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_VERBOSE_MAKEFILE ON)
SET(CMAKE_INCLUDE_CURRENT_DIR TRUE)
SET(CMAKE_SKIP_RULE_DEPENDENCY TRUE)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

#PROJECT SETUP
PROJECT(traverso)
SET (VERSION_MAJOR "0")
SET (VERSION_MINOR "42")
SET (VERSION_PATCH "0")
SET (VERSION_SUFFIX "")
SET (VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}${VERSION_SUFFIX})
MESSAGE(STATUS "Traverso ${VERSION} will be built to install into ${CMAKE_INSTALL_PREFIX}")


OPTION(WANT_JACK    	"Include Jack (Jack Audio Connection Kit) support" ON)
OPTION(WANT_ALSA    	"Include ALSA (Advanced Linux Sound Architecture) support" ON)
OPTION(WANT_PCH     	"Use precompiled headers" ON)
OPTION(WANT_DEBUG   	"Debug build" ON)
OPTION(WANT_OPENGL	"Build Traverso with OpenGL support" ON)
OPTION(WANT_TRAVERSO_DEBUG "Provides 4 levels of debug ouput on the command line" ON)


SET(MAIN_DIR_NAME "src")
IF(TAG_VERSION)
  MESSAGE(STATUS "Previously selected version tag: ${TAG_VERSION}")
  SET(WANT_VERSIONING 1)
  SET(CACHED_VERSIONING 1)
ENDIF(TAG_VERSION)
IF (WANT_VERSIONING AND NOT CACHED_VERSIONING)
  IF (NOT CUSTOM_VERSIONTAG)
    SET(TAG_VERSION "-${VERSION}" CACHE TYPE STRING)
  ELSE (NOT CUSTOM_VERSIONTAG)
    SET(TAG_VERSION ${CUSTOM_VERSIONTAG} CACHE TYPE STRING)
  ENDIF (NOT CUSTOM_VERSIONTAG)
ENDIF (WANT_VERSIONING AND NOT CACHED_VERSIONING)

#BUILD SETUP
#None, Debug, Release, .. or custom ones
IF(WANT_DEBUG)
  SET(CMAKE_BUILD_TYPE DEBUG)
  SET(WANT_TRAVERSO_DEBUG ON)
ELSE(WANT_DEBUG)
  SET(CMAKE_BUILD_TYPE RELEASE)
ENDIF(WANT_DEBUG)

IF(WANT_TRAVERSO_DEBUG)
  ADD_DEFINITIONS(-DUSE_DEBUGGER)
ENDIF(WANT_TRAVERSO_DEBUG)

# Moves the Traverso exec. to the root dir and libs to the root's lib dir.
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/lib)


IF(APPLE)
  SET( ENV{MACOSX_DEPLOYMENT_TARGET} 10.3 ) 
  SET( ENV{LD_PREBIND} 1 )
  SET( ENV{LD_PREBIND_ALLOW_OVERLAP} 1 )
  SET(CMAKE_CXX_FLAGS_DEBUG "-O2 -g3 -fno-inline-functions -Wall")
  SET(CMAKE_C_FLAGS_DEBUG "-O2 -g3 -fno-inline-functions -Wall")
  SET(BUILD_MAC_BUNDLE 1)
ELSE(APPLE)
  SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -Wall -include ${CMAKE_SOURCE_DIR}/src/precompile.h -Winvalid-pch")
  SET(CMAKE_C_FLAGS_DEBUG "-O0 -g3 -Wall")
ENDIF(APPLE)
SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -Wall")
SET(CMAKE_C_FLAGS_RELEASE "-O2 -Wall")

INCLUDE (${CMAKE_ROOT}/Modules/TestBigEndian.cmake)
TEST_BIG_ENDIAN(WORDS_BIGENDIAN)

# Check for PKG-CONFIG
FIND_PACKAGE(PkgConfig REQUIRED)
IF(PKG_CONFIG_FOUND)
    MESSAGE(STATUS "Program pkg-config found (${PKG_CONFIG_EXECUTABLE})")
ELSE(PKG_CONFIG_FOUND)
    MESSAGE(FATAL_ERROR "Program pkg-config not found")
ENDIF(PKG_CONFIG_FOUND)

#FIND DEPENDENCIES
SET (QT_MIN_VERSION "4.2.0")
FIND_PACKAGE(Qt4 REQUIRED)


include(${QT_USE_FILE})


IF(WANT_OPENGL)
	IF(QT_QTOPENGL_FOUND)
		ADD_DEFINITIONS(-DQT_OPENGL_SUPPORT)
		SET(HAVE_OPENGL TRUE)
	ENDIF(QT_QTOPENGL_FOUND)
ENDIF(WANT_OPENGL)


IF(WANT_ALSA)
	PKG_CHECK_MODULES(ALSA  alsa>=1.0.0)
	IF (ALSA_FOUND)
  		MESSAGE("-- ALSA Library Found OK")
		ADD_DEFINITIONS(-DALSA_SUPPORT)
	  	SET(HAVE_ALSA TRUE)
	ENDIF(ALSA_FOUND)
ELSE(WANT_ALSA)
	MESSAGE("-- ALSA support: Disabled")
ENDIF(WANT_ALSA)


IF(WANT_JACK)
	PKG_CHECK_MODULES(JACK jack>=0.100)
	IF(JACK_FOUND)
		ADD_DEFINITIONS(-DJACK_SUPPORT)
		MESSAGE("-- Jack Library Found OK")
		SET(HAVE_JACK TRUE)
		SET(JACK_LIBS ${JACK_LIBRARIES})
		#MESSAGE("JACK_LIBS: ${JACK_LIBS}")
		LIST(APPEND JACK_LIB_DIR ${JACK_LIBDIR} ${JACK_LIBRARY_DIRS})
		#MESSAGE("JACK_LIB_DIR: ${JACK_LIB_DIR}")
		LIST(APPEND JACK_INC_DIR ${JACK_INCLUDEDIR} ${JACK_INCLUDE_DIRS})
		#MESSAGE("JACK_INC_DIR: ${JACK_INC_DIR}")
	ENDIF(JACK_FOUND)
ELSE(WANT_JACK)
	MESSAGE("-- Jack support: Disabled")
ENDIF(WANT_JACK)


ADD_DEFINITIONS(-DLV2_SUPPORT)
ADD_DEFINITIONS(-DSTATIC_BUILD)


PKG_CHECK_MODULES(WAVPACK  wavpack>=4.40.0)
IF (WAVPACK_FOUND)
  MESSAGE("-- WavPack Library Found OK")
ELSE(WAVPACK_FOUND)
  MESSAGE(FATAL_ERROR "No WavPack found (WavPack >= 4.41.0 needs to be installed!)")
ENDIF(WAVPACK_FOUND)


# Check GCC for PCH support
SET(USE_PCH FALSE)
IF(WANT_PCH)
    FIND_PACKAGE(PCHSupport)
    IF(PCHSupport_FOUND)
        SET(USE_PCH TRUE)
        MESSAGE(STATUS "Enabling precompiled headers for GCC ${gcc_compiler_version}") 
    ENDIF(PCHSupport_FOUND)
ELSE(WANT_PCH)
#QT_DEFENITIONS are added by pch, so when no pch support add them now!
	ADD_DEFINITIONS(${QT_DEFINITIONS})
ENDIF(WANT_PCH)


INCLUDE (ConfigureChecks.cmake)

CHECK_INCLUDE_FILE("sys/sys/vfs.h" HAVE_SYS_VFS_H)
IF(HAVE_SYS_VFS_H)
	ADD_DEFINITIONS(-DHAVE_SYS_VFS_H)
ENDIF(HAVE_SYS_VFS_H)

CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
IF(HAVE_SYS_STAT_H)
  ADD_DEFINITIONS(-DHAVE_SYS_STAT_H)
ENDIF(HAVE_SYS_STAT_H)


#Create configure files.. config.h and uninstall
#config.h
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/src/config.h)
ADD_DEFINITIONS("-DHAVE_CONFIG_H")

#uninstall
CONFIGURE_FILE(
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
  "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
  IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")

#Set up include dirs with all found packages
INCLUDE_DIRECTORIES(
${CMAKE_SOURCE_DIR}/src/common
${QT_INCLUDE_DIR}
${QT_QTCORE_INCLUDE_DIR}
)

#Set up libraries to link with all found packages
LINK_LIBRARIES (
${QT_QT_LIBRARY}
)

IF(WIN32)
  LINK_LIBRARIES(
    ${QT_QTMAIN_LIBRARY}
  )
ENDIF(WIN32)

IF(WIN32)
  ADD_DEFINITIONS(-DQT_DLL)
ENDIF(WIN32)

IF(APPLE)
  LINK_LIBRARIES( "-undefined dynamic_lookup" ) 
  LINK_LIBRARIES( "-framework CoreFoundation" ) 
ENDIF(APPLE)


#Add our source subdirs
ADD_SUBDIRECTORY(src)


#Install our READMEs etc.
INSTALL(FILES
AUTHORS
README
TODO

  DESTINATION ${CMAKE_SOURCE_DIR}/src/
)

# If the cmake version includes cpack, use it
IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Traverso is an open source Digital Audio Workstation for Linux, Mac OSX and Windows")
  SET(CPACK_PACKAGE_VENDOR "Traverso Team")
  SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
  SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/README")
  SET(CPACK_PACKAGE_VERSION_MAJOR "${VERSION_MAJOR}")
  SET(CPACK_PACKAGE_VERSION_MINOR "${VERSION_MINOR}")
  SET(CPACK_PACKAGE_VERSION_PATCH "${VERSION_PATCH}")
  SET(CPACK_PACKAGE_INSTALL_DIRECTORY "Traverso ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
  SET(CPACK_PACKAGE_EXECUTABLES "traverso${TAG_VERSION}")
  SET(CPACK_SOURCE_PACKAGE_FILE_NAME "traverso-${VERSION}")
  SET(CPACK_SOURCE_GENERATOR TBZ2)
## I'll make this prettier later - ignore any tarballs in the root
  SET(CPACK_SOURCE_IGNORE_FILES CMakeCache.txt  "~$" "\\\\.cvsignore$" "^${PROJECT_SOURCE_DIR}.*/CVS/" "^${PROJECT_SOURCE_DIR}/debian/" "^${PROJECT_SOURCE_DIR}/old/" "^${PROJECT_SOURCE_DIR}.*/CVSROOT/" "^${PROJECT_SOURCE_DIR}.*/autom4te.cache/")
  INCLUDE(CPack)
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")

